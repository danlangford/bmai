name: CMake

# when developing on another branch 
# if you want GHActions to auto build the branch
# add the branch name to the `push` section below
# you only need to make that change ON THE BRANCH to be built
# please remove it when merging into `main`
on:
  push:
    # TODO remove the extra branch before merging into main
    branches: [ main, no_surrender ]
  pull_request:
    branches: [ main ]

  # this allows us to manually dispatch the build from GH Actions UI
  workflow_dispatch:
    inputs:
      buildType:
        description: CMake build type (config)
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

env:
  # if the build is not manually dispatched we will default to 'Release' build
  BUILD_TYPE: ${{ inputs.buildType || 'Release' }}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    # The CMake configure and build commands are platform-agnostic
    # and _should_ work equally well on Windows/Mac/Linux.
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: "~3.11.0"
        # forcing a specific version to maintain compatibility with VS2017

## later versions of cmake wont need msbuild setup with an action 
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3.1
      if: matrix.os == 'windows-latest'

## on later versions of cmake we can use the -S -B syntax
#    - name: CMake Configure
#      shell: bash
#      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: CMake Configure
      shell: bash
      run: mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
## later versions of cmake auto-create the build folder

    - name: CMake Build
      shell: bash
 ## In later versions of cmake we can specify targets with "--target NAMEa NAMEb"
      run: cmake --build build --config $BUILD_TYPE

    - name: CTest
      working-directory: build
      shell: bash
      run: ctest -C $BUILD_TYPE --no-tests=error --output-junit ctest-results.xml
  # someday I want to try again to display the test results
    
    - name: Upload *NIX Binary
      uses: actions/upload-artifact@v3
      if: matrix.os != 'windows-latest'
      with:
          name: bmai-${{ runner.os }}-${{ env.BUILD_TYPE }}
          path: ./build/bmai

    - name: Upload WINDOWS Binary
      uses: actions/upload-artifact@v3
      if: matrix.os == 'windows-latest'
      with:
          name: bmai-${{ runner.os }}-${{ env.BUILD_TYPE }}
          path: ${{ github.workspace }}\build\${{ env.BUILD_TYPE }}\bmai.exe
